@startuml ConnectFour

class GameEngine {
    -players: IPlayer[]
    -gameBoard: IGameBoard
    -winConditions: IWinCondition[]
    -maxNumberOfTurns: int
    -outputViewer: IOutputViewer
    +Run()
    -GetPlayerForTurn() : IPlayer
    -IsGameInWinningState(int): bool
}

' Players
interface IPlayer {
    +Name: string
    +TokenType: TokenType
    +GetNextMove(): int
}
abstract Player {
    #numberOfColumns: int
}
class HumanPlayer {
    -input: IInput
}
class ComputerPlayer

' Gameboard
interface IGameBoard {
    +NumerOfRows: int
    +NumberOfColumns: int
    +PlaceToken(TokenType, int) : bool
    +GetRowOfLastPlayedToken(int): int
    +GetTokenAt(int, int): TokenType
}

class GameBoard {
    -gameBoardMatrix: TokenType[][]
    -rowIndexUpperBound: int
    -colIndexUpperBound: int
    -CompensateForZeroBasedIndex(int): int
}

' Output
interface IOutputViewer {
    +ShowMessage(string)
    +PrintGameBoard(IGameBoard)
}

class OutputViewer {
    -GetStringRepresentation(TokenType): string
}

' WinCondition
interface IWinCondition {
    +IsFulfilled(int): bool
}

abstract WinCondition {
    -gameBoard: IGameBoard
    -tokensInLineForAWin: int
    #NumberOfRows: int
    #NumberOfColumns: int
    #IsLineBigEnoughForAWin(int): bool
    #GetRowOfLastPlayedToken(int): int
    #GetToken(int,int): TokenType
}

class HorizontalWinCondition
class VerticalWinCondition
class UpwardDiagonalWinCondition
class DownwardDiagonalWinCondition

' Relations

GameEngine "1" *-- "*" IPlayer
GameEngine "1" *-- "*" IWinCondition
GameEngine "1" *-- "1" IOutputViewer

GameEngine "1" *-- "1" IGameBoard
IGameBoard <|.. GameBoard

IWinCondition <|.. WinCondition
WinCondition <|-- HorizontalWinCondition
WinCondition <|-- VerticalWinCondition
WinCondition <|-- UpwardDiagonalWinCondition
WinCondition <|-- DownwardDiagonalWinCondition

WinCondition -- IGameBoard

IOutputViewer <|.. OutputViewer
IOutputViewer -- IGameBoard

IPlayer <|.. Player
Player <|-- HumanPlayer
Player <|-- ComputerPlayer

@enduml